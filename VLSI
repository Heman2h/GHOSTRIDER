//COUNTER

module counter32bit(clk,rst,m,count);
input clk,rst,m;
output reg[31:0]count;
always@(posedge clk or negedge rst)
begin
if(!rst)
count=0;
else if(m)
count=count+1;
else
Count=count-1;
end
endmodule
  
  
module counter_test;
reg clk,rst,m;
wire [31:0]count;
initial
begin
clk=0;
rst=0;
#25;
rst=1;
end
initial
begin
m=1;
#600 m=0;
rst=1;#500 m=0;
end
counter32bit counter32bit1(clk,rst,m,count);
always #5 clk=-clk;
initial
#1400 $finish;
endmodule


read_libs {/home/install/FOUNDRY/digital/45nn/dig/lib/slow.lib}
set_db / .lef Library { /hone/install/FOUNDRY/digital/45mm/dig/lef/gsclib045 tech_lef /home/install/FOUNDRY/digital/dig/lef/gsclib045 macro_lef }
set DESIGN counter32bit
read_hdl "counter.v"
elaborate $DESIGN
check_design -unresolved
read_sdc constraints.sdc
set_db syn_generic_effort medium
set_db syn_map_effort medium
set_db syn_opt_effort medium
syn_generic
syn_map
syn_opt
report_area > area.rpt
report_power > power.rpt
report_gates > gates.rpt
report_timing > timing.rpt
write_hdl > netlist.v
write_sdc > block.sdc
gui_show

create_clock -name clk -period 2 [get_ports "clk"]
set_input_delay -clock clk 0.8 [all inputs]
set_output_elay -clock clk 0.8 [all_outputs]
set_input_transition 0.1 [all_inputs]
set_load 0.2 [all_outputs]


//Adder

module full_adder(A,B,CIN,S,COUT);
input A,B,CIN;
output S,COUT;
assign S=A^B^CIN;
assign COUT=(A&B)|CIN&(A^B));
endmodule

//SourceCode-fa_4bit.v
module four_bit_adder(A,B,CO,S,C4);
input [3:0]A,B;
Input CO;
output [3:0]S:
output C4;
wire C1,C2,C3;
full_adder fa0 (A[0],B[0].C0,S[0].C1);
full_adder fal (A[1],B[1],C1,S[1].C2);
full_adder fa2 (A[2],B[2],C2,S[2],C3);
full_adder fa3 (A[3],B[3],C3,S[3],C4);
endmodule

module test_4_bit;
reg[3:0]A,B;
reg CO;
wire [3:0]S;
wire C4;
four_bit_adder dut (A, B, CO,S,C4);
initial
begin
A=4'b0011; B=4 b0011; CO-1'b0; #10;
A=4'b1011; B=4'b0111; C0=1'b1; #10;
A=4'b1111; B=4'b1111; CO=1'b1;
end
initial
#50 $finish;
endmodule

read_libs {/home/install/FOUNDRY/digital/45nn/dig/lib/slow.lib}
set_db / .lef Library { /hone/install/FOUNDRY/digital/45mm/dig/lef/gsclib045 tech_lef /home/install/FOUNDRY/digital/dig/lef/gsclib045 macro_lef }
set DESIGN full_adder
read_hdl "adder.v"
elaborate $DESIGN
check_design -unresolved
read_sdc constraints.sdc
set_db syn_generic_effort medium
set_db syn_map_effort medium
set_db syn_opt_effort medium
syn_generic
syn_map
syn_opt
report_area > area.rpt
report_power > power.rpt
report_gates > gates.rpt
report_timing -unconstrined > timing.rpt
write_hdl > netlist.v
write_sdc > block.sdc
gui_show

set_input_delay -max 0.2 [all_inputs]
set_output_delay -max 0.2 [all_outputs]
set_input_transition 0.1 [all_inputs]
set_max_capacitance 0.1 [get_ports]
set_load 20 [all_outputs]
set_max_fanout 20 [current_design]


//D FlipFlop

module dff (Q.Qbar,D,clk,rst);
output reg 0:
output Qbar;
input D,clk,rst;
always@(posedge clk)
begin
if(rst=1'b1)
Q<=1'b0;
else
Q<=D;
end
assign Qbar=~0;
endmodule

module dff_tb;
reg d,clk,rst;
wire q,qbar;
dff ul(q,qbar,d,clk,rst);
initial
begin
clk=1'b0;
forever #10 clk=~clk;
end
initial
begin
#20 d=1'b1;
rst=1'b1;
#20 d=1'b1;
rst=1'b0;
#20 d=1'b0;
rst=1'b0;
#20 d=1'b1;
rst=1'b1;
#300
$finish;
end
endmodule

read_libs {/home/install/FOUNDRY/digital/45nn/dig/lib/slow.lib}
set_db / .lef Library { /hone/install/FOUNDRY/digital/45mm/dig/lef/gsclib045 tech_lef /home/install/FOUNDRY/digital/dig/lef/gsclib045 macro_lef }
set DESIGN dff
read_hdl "dflipflop.v"
elaborate $DESIGN
check_design -unresolved
read_sdc constraints.sdc
set_db syn_generic_effort medium
set_db syn_map_effort medium
set_db syn_opt_effort medium
syn_generic
syn_map
syn_opt
report_area > area.rpt
report_power > power.rpt
report_gates > gates.rpt
report_timing > timing.rpt
write_hdl > netlist.v
write_sdc > block.sdc
gui_show


create_clock -name clk -period 2 [get_ports "clk"]
set_input_delay -clock clk 0.8 [all_inputs]
set_output_delay -clock clk 0.8 [all_outputs]
set_input_transition 0.1 [all_inputs]
set_load 0.2 [all_outputs]


//D latch

module dlatch (Q.Qbar,D,en,rst);
output reg 0:
output Qbar;
input D,en,rst;
always@(en or D or reset)
begin
if (reset =1'b1)
Q<=1'b0;
else if(en==1'b1)
Q<=D;
else
Q<=Q
end
assign Qbar=~Q;
endmodule


module dlatch_tb;
wire Q; 
wire Qbar;
reg D, en, reset;
dlatch ul(Q,Qbar,D,en,reset);
initial 
begin
D=1'b0;en=1'b1; reset=1'b1;
#20 reset=1'b0;
D=1'b1;
#20 D=1'b0;
#20 en=1'b0; D=1'b1;
#40 $finish;
end
endmodule

read_libs {/home/install/FOUNDRY/digital/45nn/dig/lib/slow.lib}
set_db / .lef Library { /hone/install/FOUNDRY/digital/45mm/dig/lef/gsclib045 tech_lef /home/install/FOUNDRY/digital/dig/lef/gsclib045 macro_lef }
set DESIGN dlatch
read_hdl "dlatch.v"
elaborate $DESIGN
check_design -unresolved
read_sdc constraints.sdc
set_db syn_generic_effort medium
set_db syn_map_effort medium
set_db syn_opt_effort medium
syn_generic
syn_map
syn_opt
report_area > area.rpt
report_power > power.rpt
report_gates > gates.rpt
report_timing > timing.rpt
write_hdl > netlist.v
write_sdc > block.sdc
gui_show

set_input_delay -max 0.25 [all_inputs]
set_output_delay -max 0.25 [all_outputs]
set_input_transition 0.2 [all_inputs]
set_max_capacitance 20 [get_ports]
set_load 0.1 [all_outputs]
set_max_fanout 20 [current_design]


//SR flipflop

module srff (S,R,clk,Q,obar);
input S,R,clk;
output Q,Qbar;
reg M,N;
always@(posedge clk)
begin
M<=! (S & clk);
Nee! (R & clk);
end assign Q=! (M & Qbar);
assign Qbar=! (N & Q);
endmodule

module srff_tb;
reg S,R,clk;
wire Q,Qbar;
srff ul(S,R,clk,Q,Qbar);
always #10 clk=~clk;
initial
begin
clk=1'b0;
S=1'b0; R=1'b0;
#20 S=1'b0; R=1'b1;
#20 S=1'b1; R=1'b0;
#20 S=1'b0; R=1'b0;
#20 S=1'b1; R=1'b1;
#20 S=1'b0; R=1'b1;
end
initial
#300 $finish;
endmodule

read_libs {/home/install/FOUNDRY/digital/45nn/dig/lib/slow.lib}
set_db / .lef Library { /hone/install/FOUNDRY/digital/45mm/dig/lef/gsclib045 tech_lef /home/install/FOUNDRY/digital/dig/lef/gsclib045 macro_lef }
set DESIGN srff
read_hdl "srff.v"
elaborate $DESIGN
check_design -unresolved
read_sdc constraints.sdc
set_db syn_generic_effort medium
set_db syn_map_effort medium
set_db syn_opt_effort medium
syn_generic
syn_map
syn_opt
report_area > area.rpt
report_power > power.rpt
report_gates > gates.rpt
report_timing > timing.rpt
write_hdl > netlist.v
write_sdc > block.sdc
gui_show

create_clock -name clk -period 2 [get_ports "clk"]
set_input_delay -clock clk 0.8 [all_inputs]
set_output_delay -clock clk 0.8 [all_outputs]
set_input_transition 0.1 [all_inputs]
set_load 0.2 [all_outputs]


//SR latch


module srlatch (S,R,en,Q,Qbar);
input S,R,en;
output Q,Qbar;
reg M,N;
always@(en or S or R)
begin
M=! (S & en);
N=! (R & en);
end
assign Q=! (M & Qbar);
assign Qbar=! (N & Q);
endmodule

module srlatch_tb;
reg S, R, en;
wire Q,Qbar;
srlatch ul(S, R, en, Q, Qbar);
always #100 en=~en;
initial
begin
en=1'b1; S=1'b1; R=1'b0;
#40 S-1'b0; R=1'b0;
#40 S=1'b0; R=1'b1;
#40 S=1'b1; R=1'b1;
#40 S=1'b1; R=1'b0;
#40 5=1'b0; R=1'b1;
#40 S=1'b1; R=1'b0;
end
initial
#300 $finish;
endmodule


read_libs {/home/install/FOUNDRY/digital/45nn/dig/lib/slow.lib}
set_db / .lef Library { /hone/install/FOUNDRY/digital/45mm/dig/lef/gsclib045 tech_lef /home/install/FOUNDRY/digital/dig/lef/gsclib045 macro_lef }
set DESIGN srlatch
read_hdl "srlatch.v"
elaborate $DESIGN
check_design -unresolved
read_sdc constraints.sdc
set_db syn_generic_effort medium
set_db syn_map_effort medium
set_db syn_opt_effort medium
syn_generic
syn_map
syn_opt
report_area > area.rpt
report_power > power.rpt
report_gates > gates.rpt
report_timing -unconstrined > timing.rpt
write_hdl > netlist.v
write_sdc > block.sdc
gui_show

set_input_delay -max 0.25 [all inputs]
set_output_delay -max 0.25 [all outputs]
set_input_transition 0.2 [all_inputs] 
set_max_capacitance 20 [get_potrs]
set load 0.1 [all_outputs]
set_max_fanout 20 [current_design]


//JK flipflop

module jkff (J,K,clk,Q);
input J,K,clk;
output reg Q:
always@(posedge clk)
begin
if(J==0 && K==0)
Q=Q;
else if (J==1 && K==0)
Q=1;
else if (J==0 && K==1)
Q=0;
else if(J==1 && K==1)
Q=~Q
end
endmodule

module jkff_tb;
reg J,K,clk;
wire Q;
jkff ul(J,K,clk,Q);
always #10 clk=~clk;
initial
begin
clk=1'b0;
J=1'b0; K=1'b0;
#26 J=1'b0; K=1'b1;
#20 J=1'b1; K=1'b0;
#20 J=1'b1; K=1'b0;
#20 J=1'b1; K=1'b1;
#20;
end
initial #300 $finish;
endmodule

read_libs {/home/install/FOUNDRY/digital/45nn/dig/lib/slow.lib}
set_db / .lef Library { /hone/install/FOUNDRY/digital/45mm/dig/lef/gsclib045 tech_lef /home/install/FOUNDRY/digital/dig/lef/gsclib045 macro_lef }
set DESIGN jkff
read_hdl "jkflipflop.v"
elaborate $DESIGN
check_design -unresolved
read_sdc constraints.sdc
set_db syn_generic_effort medium
set_db syn_map_effort medium
set_db syn_opt_effort medium
syn_generic
syn_map
syn_opt
report_area > area.rpt
report_power > power.rpt
report_gates > gates.rpt
report_timing > timing.rpt
write_hdl > netlist.v
write_sdc > block.sdc
gui_show

create_clock -name clk -period 2 [get_ports "clk"]
set_input_delay -clock clk 0.8 [all_inputs]
set_output_delay -clock clk 0.8 [all_outputs]
set_input_transition 0.1 [all_inputs]
set_load 0.2 [all_outputs]



//Jk latch

module jklatch (J,K,en,Q);
input J,K,en;
output reg Q:
always@(en or J or K))
begin
if (en==1'b0)
Q=Q;
else if (J==1 && K==0)
Q=1;
else if (J==0 && K==1)
Q=0;
else if(J==1 && K==1)
Q=~Q
end
endmodule


module jklatch_tb;
reg K,J,en;
wire Q;
jklatch ul(J,K,en,Q);
initial
begin
en=1'b0;J=1'b0;K=1'b0;
#10 en=1'b1;
#20 J=1'b0;K=1'b1;
#20 J=1'b1; K=1'b0;
#20 J=1'b0; K=1'b0;
#20 J=1'b1; K=1'b1;
#60 en 1'b0; J=1'b1; K=1'b0;
#20;
end
initial #300 $finish;
endmodule


read_libs {/home/install/FOUNDRY/digital/45nn/dig/lib/slow.lib}
set_db / .lef Library { /hone/install/FOUNDRY/digital/45mm/dig/lef/gsclib045 tech_lef /home/install/FOUNDRY/digital/dig/lef/gsclib045 macro_lef }
set DESIGN jklatch
read_hdl "jklatch.v"
elaborate $DESIGN
check_design -unresolved
read_sdc constraints.sdc
set_db syn_generic_effort medium
set_db syn_map_effort medium
set_db syn_opt_effort medium
syn_generic
syn_map
syn_opt
report_area > area.rpt
report_power > power.rpt
report_gates > gates.rpt
report_timing -unconstrined > timing.rpt
write_hdl > netlist.v
write_sdc > block.sdc
gui_show

set_input_delay -max 0.25 [all inputs]
set_output_delay -max 0.25 [all outputs]
set_input_transition 0.2 [all_inputs] 
set_max_capacitance 20 [get_potrs]
set load 0.1 [all_outputs]
set_max_fanout 20 [current_design]

set_input_delay -max 0.25 [all_inputs]
set_output_delay -max 0.25 [all_outputs]
set_input_transition 0.2 [all_inputs]
set_max_capacitance 20 [get_ports]
set_load 0.1 [all_outputs]
set_max_fanout 20 [current_design]


//Alu32bit

module alu32bit (y,a,b,f);
input [31:0]a,b;
input [2:0]f;
output reg [31:0]y;
always@ (*)
begin
case (f)
3'b000: y=a&b;
3'b001: y=a|b;
3'b010: y=~(a&b);
3'b011: y=~(a|b);
3'b100: y=a+b;
3'b101: y-a-b;
3'b110: y=a*b;
default: y=32'bx;
end
endmodule


module alu32bit_tb;
reg [31:0]a,b;
reg [2:0]f;
wire [31:0]y;
alu32bit dut (y,a,b,f);
initial
begin
a=32'h01000000;
b=32'hFFFFFFFF;
#10 f=3'b000;
#10 f=3'b001;
#10 f=3'b010;
#10 f=3'b011;
#10 f=3'b100;
#10 f=3'b101;
#10 f=3'b110;
#10 f=3'b111;
end
initial
#150 $finish;
endmodule


module alu32bit (y,a,b,f);
input [31:0]a,b;
input [2:0];
output reg [31:0]y;
always@(*)
begin
if (f==3'b000)
y=a&b;
else if (f==3'b001)
y=a|b;
else if (f==3'b010)
y=~(a&b);
else if (f==3'b011)
y=~(a|b);
else if (f==3'b100)
y=a+b;
else if (f==3'b101)
y=a-b;
else if (f==3'b110)
y=a*b;
else
y=32'bx;
end
endmodule

module alu32bit_tb;
reg [31:0]a,b;
reg [2:0]f;
wire [31:0]y;
alu32bit dut (y,a,b,f);
initial
begin
a=32'h01000000;
b=32'hFFFFFFFF;
#10 f=3'b000;
#10 f=3'b001;
#10 f=3'b010;
#10 f=3'b011;
#10 f=3'b100;
#10 f=3'b101;
#10 f=3'b110;
#10 f=3'b111;
end
initial
#150 $finish;
endmodule


read_libs {/home/install/FOUNDRY/digital/45nn/dig/lib/slow.lib}
set_db / .lef Library { /hone/install/FOUNDRY/digital/45mm/dig/lef/gsclib045 tech_lef /home/install/FOUNDRY/digital/dig/lef/gsclib045 macro_lef }
set DESIGN jklatch
read_hdl "jklatch.v"
elaborate $DESIGN
check_design -unresolved
read_sdc constraints.sdc
set_db syn_generic_effort medium
set_db syn_map_effort medium
set_db syn_opt_effort medium
syn_generic
syn_map
syn_opt
report_area > area.rpt
report_power > power.rpt
report_gates > gates.rpt
report_timing -unconstrined > timing.rpt
write_hdl > netlist.v
write_sdc > block.sdc
gui_show


set_input_delay -max 0.2 [get_ports "a"] 
et_input_delay -max 0.2 [get_ports "b"]
set_output_delay -max 0.2 [get_ports "y"]
